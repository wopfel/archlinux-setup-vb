#!/usr/bin/perl

# Copyright (C) 2014 Bernd Arnold
# Licensed under GPLv2
# See file LICENSE for more information
#
# https://github.com/wopfel/archlinux-setup-vb

use strict;
use warnings;
use threads;
use threads::shared;
use HTTP::Daemon;
use HTTP::Status qw(:constants);
use utf8;
use Date::Format;




# Track state of virtual machine (shared within threads)
# TODO
#my %vm_state :shared;
my $last_step_completed_nr :shared;
my $last_step_completed_rc :shared;



sub consolemsg(@);



# The scanmap hash stores for a specific keyboard key or character (hash key)
# the respective scancodes (hash value).
# The keyboard layout is based on a german keyboard.

my %scanmap;

#
# Keylist on German keyboard
#
# Base keys (beginning with normal), used without shift modifier key
# "Uppercase" keys (beginning with shift), used with shift modifier key
#

my $keyboardmap = <<'KEYMAP';
normal::0x02::1234567890ß´
normal::0x10::qwertzuiopü+
normal::0x1e::asdfghjklöä#
normal::0x2b::<yxcvbnm,.-
shift::0x02::!"§$%&/()=?`
shift::0x10::QWERTZUIOPÜ*
shift::0x1e::ASDFGHJKLÖÄ'
shift::0x2b::>YXCVBNM;:_
KEYMAP

for ( split /\n/, $keyboardmap ) {

    if ( /^([a-z]+)::0x(..)::(.*)$/ ) {
        my ( $modifier, $offset, $keys ) = ( $1, $2, $3 );
        my $nr = 0;
        for my $key ( split //, $keys ) {
            #print "[ $key ]";
            my $scancodes = sprintf "%02x %02x", (hex($offset) + $nr), (hex($offset) + $nr + 128);
            if    ( $modifier eq "normal" )    { $scanmap{ $key } = $scancodes;         }
            elsif ( $modifier eq "shift" )     { $scanmap{ $key } = "2a $scancodes aa"; }
            else { die "Unhandled modifier '$modifier' found for keyboard/scancode mapping"; }
            $nr++;
        }
    }
}

# Credits to: http://www.marjorie.de/ps2/scancode-set1.htm
$scanmap{ "<LT>" }       = "56 d6";
$scanmap{ "<GT>" }       = "2a 56 d6 aa";
$scanmap{ "<BACKSPACE>" }= "0e 8e";
$scanmap{ "<SPACE>" }    = "39 b9";
$scanmap{ " " }          = $scanmap{ "<SPACE>" };
$scanmap{ "{" }          = "e0 38 08 88 e0 b8";
$scanmap{ "}" }          = "e0 38 0b 8b e0 b8";
$scanmap{ "[" }          = "e0 38 09 89 e0 b8";
$scanmap{ "]" }          = "e0 38 0a 8a e0 b8";
$scanmap{ '\\' }         = "e0 38 0c 8c e0 b8";
$scanmap{ "#" }          = "2b ab";
$scanmap{ "'" }          = "2a 2b ab aa";
$scanmap{ "^" }          = "29 a9";
$scanmap{ "|" }          = "e0 38 56 d6 e0 b8";  # From `showkey -s`
$scanmap{ '@' }          = "e0 38 " . $scanmap{ "q" } . " e0 b8";
$scanmap{ "<ENTER>" }    = "1c 9c";
$scanmap{ "<ARROW-DOWN>" }    = "e0 50 e0 d0";
$scanmap{ "<ARROW-LEFT>" }    = "e0 4b e0 cb";
$scanmap{ "<ARROW-UP>" }      = "e0 48 e0 c8";
$scanmap{ "<ARROW-RIGHT>" }   = "e0 4d e0 cd";


sub send_keys_to_vm {

    # You can run `showkey --scancodes` on a console to view the scancodes

    my $string = shift;
    my @scancodes = ();

    while ( length $string > 0 ) {

        # First if-part: <SPECIAL> keys
        # Second if-part: default keys, like 'q', 'w', ..., 'Q', ...

        if ( $string =~ /^(<.*?>)(.*)$/ ) {

            # Store special key and move everything else back to $string for the next round
            my $key = $1;
            $string = $2;
            #print "=== $1 ===\n";
            #print "=== $2 ===\n";

            if ( defined $scanmap{ $1 } ) {
                push @scancodes, $scanmap{ $1 };
            } elsif ( $key eq "<WAIT_PAUSE>" ) {
                # Inserts a pause before firing the next keystrokes
                push @scancodes, "WAIT_PAUSE";
            } else {
                print STDERR "Error: missing scancode for special '$key'!";
                die;
            }

        } elsif ( $string =~ /^(.)(.*)$/ ) {

            # Store key and move everything else back to $string for the next round
            my $key = $1;
            $string = $2;
            #print "=== $1 ===\n";
            #print "=== $2 ===\n";

            # Check for a less-than sign or greather-than sign
            if ( $key =~ /^(<|>)$/ ) {
                print STDERR "Error: Lonely '$key' found. Use <LT> and <GT> for single '<'/'>' keys!";
                die;
            }

            # Get the respective scan codes
            if ( defined $scanmap{ $1 } ) {
                push @scancodes, $scanmap{ $1 };
            } else {
                print STDERR "Error: missing scancode for key '$key'!";
                die;
            }

        } else {

            print STDERR "Error: unknown format, perhaps at least one backslash has to be escaped in '$string'!";
            die;

        }

        #print "==========\n";

    }


    # The command mustn't be too long, otherwise vboxmanage complains with the following message:
    # error: Could not send all scan codes to the virtual keyboard (VERR_PDM_NO_QUEUE_ITEMS)
    # To avoid this the scancodes are split and passed in several vboxmanage commands

    # Some commands seem to empty the keyboard buffer before reading new keys
    # For this, <WAIT_PAUSE> (which was translated to WAIT_PAUSE) can be used which delays the next keystrokes


    # While there are elements in the array...
    while ( scalar @scancodes > 0 ) {

        # Check if the first element tells us to wait
        if ( $scancodes[0] eq "WAIT_PAUSE" ) {
            # Sleep some time
            #print "Sleeping.\n";
            sleep 2;
            # Remove element and retry loop
            shift @scancodes;
            next;
        }

        # The maximum number of elements for splice
        my $max_elements;

        # Check if there's a "WAIT_PAUSE" awaiting us
        # Beginning with 1, since the first element cannot be "WAIT_PAUSE"
        for my $i ( 1..9 ) {

            # Exit the loop if end is reached
            last unless defined $scancodes[$i];

            # Check for pause instruction
            if ( $scancodes[$i] eq "WAIT_PAUSE" ) {
                # Not "+ 1", so WAIT_PAUSE is left in the array
                $max_elements = $i;
            }

        }

        # Defaults to 10
        $max_elements ||= 10;

        # Get the first $max_elements scancodes (note: in this context, one scancode could be "26 a6")
        my @subset = splice( @scancodes, 0, $max_elements );

        # Join all 2-digit scancodes using a blank (" ")
        my $scancodes = join " ", @subset;

        # Call vboxmanage
        # The scancodes must be passed as separate parameters, so the joined $scancodes doesn't work
        # If passed as a single parameter ("1c 9c"), vboxmanage complains with "Error: '...' is not a hex byte!"
        my @args = ( "vboxmanage", "controlvm", "{f57aeae8-bc2c-47c3-9b65-f5822f8b47ef}",
                     "keyboardputscancode",
                     split( / /, $scancodes )
                   );

        #print "@args\n";
        system( @args ) == 0  or  die "Error: system call (@args) failed";

    }

}



sub process_client_request {

    #print "Processing request.\n";

    my $c = shift;
    my $r = $c->get_request;

    if ( $r ) {
        #print "URI: ", $r->uri->path, "\n";
        #print "URL: ", $r->url->path, "\n";

        # /vmstatus/CURRENTVM/alive
        if ( $r->method eq "GET"  and  $r->url->path =~ m"^/vmstatus/CURRENTVM/alive$" ) {
            # Maybe we're handling more than one VM at the same time, so CURRENTVM is a placeholder for future enhancements
            consolemsg "VM is alive!\n";
            # Send back status code 200: OK
            $c->send_status_line( HTTP_OK );
            # Store current time
            # TODO: $vm_state->{'CURRENTVM'}{'alive_msg'} = time;
        }
        # http://10.0.2.2:8080/vmstatus/CURRENTVM/step/$step/returncode/\$?
        elsif ( $r->method eq "GET"  and  $r->url->path =~ m"^/vmstatus/CURRENTVM/step/(\d+)/returncode/(\d+)$" ) {
            # Assuming only positive returncodes (\d+)
            # Maybe we're handling more than one VM at the same time, so CURRENTVM is a placeholder for future enhancements
            my $stepnr = $1;
            my $returncode = $2;
            consolemsg "VM reported return code: $returncode. Finished step number: $stepnr.\n";
            # Send back status code 200: OK
            $c->send_status_line( HTTP_OK );
            # Store return code and step information
            $last_step_completed_nr = $stepnr;
            $last_step_completed_rc = $returncode;
            # TODO:
            #$vm_state->{'CURRENTVM'}{'last_completed_step_nr'} = $stepnr;
            #$vm_state->{'CURRENTVM'}{'last_completed_step_rc'} = $returncode;
            #$vm_state->{'CURRENTVM'}{'last_completed_step_time'} = time;
            #$vm_state->{'CURRENTVM'}{'steplist'}{$stepnr}{'rc'} = $returncode;
            #$vm_state->{'CURRENTVM'}{'steplist'}{$stepnr}{'time'} = $vm_state->{'CURRENTVM'}{'last_completed_step_time'};
        } elsif ( $r->method eq "POST"  and  $r->url->path =~ m"^/data/CURRENTVM/step/(\d+)/data/(.*)$" ) {
            my $stepnr = $1;
            my $datatype = $2;
            consolemsg "VM sent data '$datatype' in step $stepnr: <<" . $r->content . ">>.\n";
            # Send back status code 200: OK
            $c->send_status_line( HTTP_OK );
        } else {
            $c->send_error( HTTP_NOT_IMPLEMENTED, "Too early. Function not implemented yet." );  # HTTP status code 501
        }
    } else {
        $c->send_error( HTTP_FORBIDDEN );
    }

    $c->close;
    undef( $c );

}


sub http_thread {

    my $daemon = HTTP::Daemon->new(
                                    LocalPort => 8080,
                                    Listen => 20
                                  );

    die unless $daemon;

    consolemsg "Embedded web server started.\n";
    consolemsg "Server address: ", $daemon->sockhost(), "\n";
    consolemsg "Server port: ",    $daemon->sockport(), "\n";

    # Wait for client requests
    while ( my $c = $daemon->accept ) {
        threads->create( \&process_client_request, $c )->detach();
    }

    # TODO: Reach this point the "normal" way (how to exit the previous while loop?)

    consolemsg "Embedded web server ends.\n";

}


sub consolemsg(@) {

    my @msg = @_;

    print time2str( "[%H:%M:%S] ", time );

    print @msg;

}


# No output buffering
$| = 1;

my $thread = threads->create( 'http_thread' );

consolemsg "Program started.\n";

my @vm_steps = (
                 {
                   command => "§ Starting script...",
                 },
                 {
                   command => "loadkezs deßlatin1",
                 },
                 {
                   command => "# State: \$GITCOMMITID\$",
                 },
                 {
                   command => "cat /proc/cmdline",
                 },
                 {
                   command => "date",
                 },
                 {
                   command => 'sendrc() { curl --noproxy "*" http://10.0.2.2:8080/vmstatus/CURRENTVM/step/$1/returncode/$? }',
                   description => "Define shell function for sending the return code",
                 },
                 {
                   command => "true",
                   description => "Test sendrc() function",
                   requestrc => 1,
                 },
                 {
                   command => 'kill ${${(v)jobstates#*:*:}%=*}',
                   description => "Killing all background jobs (easier for testing when the program is restarted frequently)",
                 },
                 {
                   command => "curl --noproxy '*' http://10.0.2.2:8080/vmstatus/CURRENTVM/alive",
                 },
                 {
                   command => "[[ ` grep -c 'sda[0-9]' /proc/partitions`  -eq 0 ]]",  # Space following ` needed (dead key)
                   description => "Ensure there are no partitions on the disk",
                   requestrc => 1,
                 },
                 {
                   command => "while true ; do curl --noproxy '*' http://10.0.2.2:8080/vmstatus/CURRENTVM/alive 1<GT> /dev/null 2<GT>&1 ; sleep 2 ; done &",
                   description => "Background loop to let us know the VM is alive",
                 },
                 {
                   command => "ping -c 3 www.google.com",
                   description => "Test internet connection",
                   requestrc => 1,
                 },
                 {
                   # TODO: Transfer current step number
                   command => "uname -a | curl -d \@- --noproxy '*' http://10.0.2.2:8080/data/CURRENTVM/step/0/data/uname",
                   description => "Submit data: current kernel information",
                   requestrc => 1,
                 },
                 {
                   command => "[[ ` fdisk -l /dev/sda | grep -ci 'disklabel'`  -eq 0 ]]",
                   description => "Ensure there is no partition layout so far",
                   requestrc => 1,
                 },
                 {
                   command => "cfdisk /dev/sda",
                   subcommand => "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "<ARROW-DOWN>" .                 # Select label type -> dos
                                 "<ENTER>" .                      # dos
                                 "<ENTER>" .                      # New partition
                                 "<BACKSPACE><BACKSPACE><BACKSPACE><BACKSPACE>" .   # Erase pre-defined value ("8G" for an 8 Gigabyte disk)
                                 "100M<ENTER>" .                  # MB
                                 "<ENTER>" .                      # Primary
                                 "<ARROW-LEFT><ARROW-LEFT>" .     # Highlight Bootable
                                 "<ENTER>" .                      # Bootable
                                 "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "<ARROW-DOWN>" .                 # Free space
                                 "<ENTER>" .                      # New partition
                                 "<ENTER>" .                      # Default size
                                 "<ENTER>" .                      # Primary
                                 "<ARROW-RIGHT>" .                # Highlight Type
                                 "<ARROW-RIGHT>" .                # Highlight Help
                                 "<ARROW-RIGHT>" .                # Highlight Write
                                 "<ENTER>" .                      # Write
                                 "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "yes<ENTER>" .
                                 "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "<ARROW-LEFT>" .                 # Highlight Help
                                 "<ARROW-LEFT>" .                 # Highlight Type
                                 "<ARROW-LEFT>" .                 # Highlight Quit
                                 "<ENTER>",                       # Quit
                   requestrc => 1,
                 },
                 {
                   command => "lsblk",
                   requestrc => 1,
                 },
                 {
                   command => "cryptsetup -c aes-xts-plain64 -y -s 512 luksFormat /dev/sda2",
                   subcommand => "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "YES<ENTER>" .
                                 "<WAIT_PAUSE>" .
                                 "arch<ENTER>" .                  # The passphrase
                                 "<WAIT_PAUSE>" .
                                 "arch<ENTER>",                   # Verify the passphrase
                   requestrc => 1,
                 },
                 {
                   command => "cryptsetup luksOpen /dev/sda2 lvm",
                   subcommand => "arch<ENTER>",                   # The passphrase
                   requestrc => 1,
                 },
                 {
                   command => "pvcreate /dev/mapper/lvm",
                   requestrc => 1,
                 },
                 {
                   command => "vgcreate main /dev/mapper/lvm",
                   requestrc => 1,
                 },
                 {
                   command => "lvcreate -L 2GB -n root main",
                   requestrc => 1,
                 },
                 {
                   command => "lvcreate -L 2GB -n swap main",
                   requestrc => 1,
                 },
                 {
                   command => "lvcreate -L 2GB -n home main",
                   requestrc => 1,
                 },
                 {
                   command => "lvs",
                   requestrc => 1,
                 },
                 {
                   command => "lsblk",
                   requestrc => 1,
                 },
                 {
                   command => "mkfs.ext4 -L root /dev/mapper/main-root",
                   requestrc => 1,
                 },
                 {
                   command => "mkfs.ext4 -L home /dev/mapper/main-home",
                   requestrc => 1,
                 },
                 {
                   command => "mkfs.ext4 -L boot -O '^64bit' /dev/sda1",
                   requestrc => 1,
                 },
                 {
                   command => "mkswap -L swap /dev/mapper/main-swap",
                   requestrc => 1,
                 },
                 {
                   command => "mount /dev/mapper/main-root /mnt",
                   requestrc => 1,
                 },
                 {
                   command => "mkdir /mnt/home",
                   requestrc => 1,
                 },
                 {
                   command => "mount /dev/mapper/main-home /mnt/home",
                   requestrc => 1,
                 },
                 {
                   command => "mkdir /mnt/boot",
                   requestrc => 1,
                 },
                 {
                   command => "mount /dev/sda1 /mnt/boot",
                   requestrc => 1,
                 },
                 {
                   command => "export http_proxy='http://proxy:3128'",
                   description => "Use proxy when downloading files with pacstrap",
                   requestrc => 1,
                 },
                 {
                   command => "echo 'Server = http://ftp.fau.de/archlinux/\$repo/os/\$arch' <GT> /etc/pacman.d/mirrorlist",
                   description => "Use specific repository server",
                   requestrc => 1,
                 },
                 {
                   command => "pacstrap /mnt base base-devel syslinux cronie",
                   requestrc => 1,
                 },
                 {
                   command => "syslinux-install_update -i -a -m -c /mnt",
                   description => "Install syslinux bootloader",
                   requestrc => 1,
                 },
                 {
                   command => "sed -i 's,APPEND root.*,APPEND cryptdevice=/dev/sda2:main root=/dev/mapper/main-root rw lang=de locale=de_DE.UTF-8,' /mnt/boot/syslinux/syslinux.cfg",
                   description => "Prepare bootloader APPEND options",
                   requestrc => 1,
                 },
                 {
                   command => "swapon -L swap",
                   description => "Enable swap",
                   requestrc => 1,
                 },
                 {
                   command => "genfstab -U -p /mnt <GT><GT> /mnt/etc/fstab",
                   description => "Write fstab",
                   requestrc => 1,
                 },
                 {
                   command => "[[ ` grep -c '^ UUID=' /mnt/etc/fstab`  -eq 4 ]]",  # Space following ^ needed (dead key)
                   description => "Ensure there are 4 partitions in the fstab file",
                   requestrc => 1,
                 },
                 {
                   command => "echo 'LANG=\"de_DE.UTF-8\"' <GT> /mnt/etc/locale.conf",
                   requestrc => 1,
                 },
                 {
                   command => "echo 'LC_COLLATE=\"C\"' <GT><GT> /mnt/etc/locale.conf",
                   requestrc => 1,
                 },
                 {
                   command => "echo 'LC_TIME=\"de_DE.UTF-8\"' <GT><GT> /mnt/etc/locale.conf",
                   requestrc => 1,
                 },
                 {
                   command => "[[ ` grep -c = /mnt/etc/locale.conf`  -eq 3 ]]",  # Space following ` needed (dead key)
                   description => "Ensure there are 3 lines containing = in locale.conf",
                   requestrc => 1,
                 },
                 {
                   command => "sed -i 's,^ #de_DE,de_DE,' /mnt/etc/locale.gen",
                   description => "Prepare locale.gen",
                   requestrc => 1,
                 },
                 {
                   command => "echo archlinux-setup-vb <GT> /mnt/etc/hostname",  # Used for determining chroot later
                   requestrc => 1,
                 },
                 {
                   command => "echo KEYMAP=de-latin1 <GT><GT> /mnt/etc/vconsole.conf",
                   requestrc => 1,
                 },
                 {
                   command => "echo FONT=lat9w-16 <GT><GT> /mnt/etc/vconsole.conf",
                   requestrc => 1,
                 },
                 {
                   command => "echo FONT_MAP=8859-1_to_uni <GT><GT> /mnt/etc/vconsole.conf",
                   requestrc => 1,
                 },
                 {
                   command => "echo 'Server = http://ftp.fau.de/archlinux/\$repo/os/\$arch' <GT> /mnt/etc/pacman.d/mirrorlist",
                   description => "Use specific repository server",
                   requestrc => 1,
                 },
                 {
                   command => "[[ ` grep -c = /mnt/etc/vconsole.conf`  -eq 3 ]]",  # Space following ` needed (dead key)
                   description => "Ensure there are 3 lines containing = in vconsole.conf",
                   requestrc => 1,
                 },
                 {
                   command => "arch-chroot /mnt",
                   requestrc => 0,  # We won't return for some time...
                 },
                 {
                   command => 'function sendrc {<ENTER>curl --noproxy "*" http://10.0.2.2:8080/vmstatus/CURRENTVM/step/$1/returncode/$?<ENTER>}',
                   description => "New shell (sh), function sendrc has to be redefined in sh-syntax",
                 },
                 {
                   command => "[[ ` grep -c archlinux-setup-vb /etc/hostname`  -eq 1 ]]",  # Space following ` needed (dead key)
                   description => "Ensure we are in the chroot now",
                   requestrc => 1,
                 },
                 {
                   command => "locale-gen",
                   requestrc => 1,
                 },
                 {
                   command => "rm /etc/localtime",
                   requestrc => 1,
                 },
                 {
                   command => "ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime",
                   requestrc => 1,
                 },
                 {
                   command => "sed -i 's,^ HOOKS=.*,HOOKS=\"base udev autodetect block keyboard keymap encrypt lvm2 filesystems fsck shutdown\",' /etc/mkinitcpio.conf",  # Space following ^ needed (dead key)
                   description => "Prepare mkinitcpio.conf",
                   requestrc => 1,
                 },
                 {
                   command => "export LANG=de_DE.UTF-8",
                   requestrc => 1,
                 },
                 {
                   command => "mkinitcpio -p linux",
                   requestrc => 1,
                 },
                 {
                   command => "passwd",
                   subcommand => "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "arch<ENTER>" .                  # Password
                                 "<WAIT_PAUSE>" .
                                 "arch<ENTER>",                   # Verify the password
                   requestrc => 1,
                 },
                 {
                   command => "systemctl enable dhcpcd.service",
                   requestrc => 1,
                 },
                 {
                   command => "systemctl enable cronie.service",
                   requestrc => 1,
                 },
                 {
                   command => "exit",
                   requestrc => 0,  # The shell ends, so the second command (sendrc) won't be executed
                 },
                 {
                   command => "umount /mnt/{boot,home,}",
                   requestrc => 1,
                 },
                 {
                   command => "###       REBOOTING the VM in 5 seconds...       ###",
                   requestrc => 0,  # No need
                 },
                 {
                   command => "reboot",
                   requestrc => 0,  # No need
                   delay_before => 5,
                 },
                 {
                   command => "<ARROW-DOWN><ARROW-DOWN>",
                   description => "In bootscreen, select 3rd option (Boot existing OS)",
                   requestrc => 0,  # No possibility
                   delay_before => 20,  # To be sure the machine has rebooted and the boot dialog is on the screen...
                 },
                 {
                   command => "arch",
                   description => "Passphrase",
                   requestrc => 0,  # No possibility
                   delay_before => 15,  # To be sure the "A password is required to access the main volume:" message is on the screen...
                 },
                 {
                   command => "root",
                   subcommand => "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "arch" .                         # The password for the root user
                                 "<ENTER>",
                   requestrc => 0,  # No possibility
                   delay_before => 20,  # To be sure the login screen has been reached
                 },
                 {
                   command => 'function sendrc {<ENTER>curl --noproxy "*" http://10.0.2.2:8080/vmstatus/CURRENTVM/step/$1/returncode/$?<ENTER>}',
                   description => "Root has a bash as default, so the function sendrc has to be defined in bash-syntax",
                 },
                 {
                   command => "true",
                   description => "Test sendrc() function",
                   requestrc => 1,
                 },
                 {
                   command => "curl --noproxy '*' http://10.0.2.2:8080/vmstatus/CURRENTVM/alive",
                 },
                 {
                   # TODO: Transfer current step number
                   command => "uname -a | curl -d \@- --noproxy '*' http://10.0.2.2:8080/data/CURRENTVM/step/0/data/uname",
                   description => "Submit data: current kernel information",
                   requestrc => 1,
                 },
                 {
                   command => "[[ ` grep -c 'sda[0-9]' /proc/partitions`  -eq 2 ]]",  # Space following ` needed (dead key)
                   description => "Ensure there are two partitions on the disk",
                   requestrc => 1,
                 },
                 {
                   command => "ping -c 3 www.google.com",
                   description => "Test internet connection",
                   requestrc => 1,
                 },
		 #
		 # Building and running arch-audit from AUR
		 #
                 {
                   command => "pacman --noconfirm -S cargo",
                   description => "Install dependency for arch-audit",
                   requestrc => 1,
                 },
                 {
                   command => "useradd -m pkgbuild",
                   description => "Adding user",
                   requestrc => 1,
                 },
                 {
                   command => "cd /home/pkgbuild",
                   description => "Change directory",
                   requestrc => 1,
                 },
                 {
                   command => "su - pkgbuild -c \"curl -LO 'https://aur.archlinux.org/cgit/aur.git/snapshot/arch-audit.tar.gz'\"",
                   description => "Download package from AUR",
                   requestrc => 1,
                 },
                 {
                   command => "su - pkgbuild -c 'tar xzf arch-audit.tar.gz'",
                   description => "Download package from AUR",
                   requestrc => 1,
                 },
                 {
                   command => "su - pkgbuild -c 'cd arch-audit && makepkg'",
                   description => "Make package (takes some minutes...)",
                   requestrc => 1,
                 },
                 {
                   command => "pacman --noconfirm -U arch-audit/arch-audit-*-x86_64.pkg.tar.xz",
                   description => "Install package",
                   requestrc => 1,
                 },
                 {
                   command => "arch-audit",
                   description => "Run arch-audit",
                   requestrc => 1,
                 },
                 {
                   command => "arch-audit --upgradable",
                   description => "Run arch-audit",
                   requestrc => 1,
                 },
                 {
                   command => "cd",
                   description => "Change directory",
                   requestrc => 1,
                 },
		 #
		 # Activating testing repository
		 #
                 {
                   command => "perl -i -0777 -pe 's/#\\[testing\\]\\n#Include/[testing]\\nInclude/s' /etc/pacman.conf",
                   # Original command (without double-backslash): perl -i -0777 -pe 's/#\[testing\]\n#Include/[testing]\nInclude/s' /etc/pacman.conf
                   description => "Activate testing repository",
                   requestrc => 1,
                 },
                 {
                   command => "perl -i -0777 -pe 's/#\\[community-testing\\]\\n#Include/[community-testing]\\nInclude/s' /etc/pacman.conf",
                   # Original command (without double-backslash): perl -i -0777 -pe 's/#\[community-testing\]\n#Include/[community-testing]\nInclude/s' /etc/pacman.conf
                   description => "Activate community-testing repository",
                   requestrc => 1,
                 },
                 {
                   command => "pacman --noconfirm -Syu",
                   description => "Update packages",
                   requestrc => 1,
                 },
                 {
                   command => "###       REBOOTING the VM in 5 seconds...       ###",
                   requestrc => 0,  # No need
                 },
                 {
                   command => "reboot",
                   requestrc => 0,  # No need
                   delay_before => 5,
                 },
                 {
                   command => "<ARROW-DOWN><ARROW-DOWN>",
                   description => "In bootscreen, select 3rd option (Boot existing OS)",
                   requestrc => 0,  # No possibility
                   delay_before => 20,  # To be sure the machine has rebooted and the boot dialog is on the screen...
                 },
                 {
                   command => "arch",
                   description => "Passphrase",
                   requestrc => 0,  # No possibility
                   delay_before => 15,  # To be sure the "A password is required to access the main volume:" message is on the screen...
                 },
                 {
                   command => "root",
                   subcommand => "<WAIT_PAUSE>" .                 # Insert a pause before continuing
                                 "arch" .                         # The password for the root user
                                 "<ENTER>",
                   requestrc => 0,  # No possibility
                   delay_before => 20,  # To be sure the login screen has been reached
                 },
                 {
                   command => 'function sendrc {<ENTER>curl --noproxy "*" http://10.0.2.2:8080/vmstatus/CURRENTVM/step/$1/returncode/$?<ENTER>}',
                   description => "Root has a bash as default, so the function sendrc has to be defined in bash-syntax",
                 },
                 {
                   command => "true",
                   description => "Test sendrc() function",
                   requestrc => 1,
                 },
                 {
                   command => "curl --noproxy '*' http://10.0.2.2:8080/vmstatus/CURRENTVM/alive",
                 },
                 {
                   # TODO: Transfer current step number
                   command => "uname -a | curl -d \@- --noproxy '*' http://10.0.2.2:8080/data/CURRENTVM/step/0/data/uname",
                   description => "Submit data: current kernel information",
                   requestrc => 1,
                 },
                 {
                   command => "[[ ` grep -c 'sda[0-9]' /proc/partitions`  -eq 2 ]]",  # Space following ` needed (dead key)
                   description => "Ensure there are two partitions on the disk",
                   requestrc => 1,
                 },
                 {
                   command => "ping -c 3 www.google.com",
                   description => "Test internet connection",
                   requestrc => 1,
                 },
                 {
                   command => "arch-audit",
                   description => "Run arch-audit",
                   requestrc => 1,
                 },
                 {
                   command => "arch-audit --upgradable",
                   description => "Run arch-audit",
                   requestrc => 1,
                 },
                 {
                   command => "echo End of script...",
                   requestrc => 1,
                 },
               );


for my $step ( 0 .. $#vm_steps ) {

    # For easier access ($step{key} instead of ${ $vm_steps[$step] }{key})
    my %step = %{ $vm_steps[$step] };

    # Check if web server thread is still running
    die "Web server thread inactive"  unless  $thread->is_running();

    consolemsg "Starting step $step...\n";

    my $step_started_time = time();

    # Check if command should be delayed
    if ( $step{'delay_before'} ) {
        my $delay_amount = $step{'delay_before'};
        consolemsg "Delaying command for $delay_amount second(s)...\n";
        sleep $delay_amount;
        consolemsg "Proceeding now.\n";
    }

    # Replace $GITCOMMITID$ variable
    if ( $step{'command'} =~ /\$GITCOMMITID\$/ ) {
        my $git_id_date = `git show -s --format="%h %ci"`;
        my $new_command = $step{'command'};
	#print ">>>$new_command<<<\n";
        $new_command =~ s/\$GITCOMMITID\$/$git_id_date/;
        $step{'command'} = $new_command;
	#print ">>>$new_command<<<\n";
    }

    # Send command to virtual machine
    send_keys_to_vm( $step{'command'} );

    # Send "submitting the return code" command to virtual machine if requested
    send_keys_to_vm( " ; sendrc $step" )  if  $step{'requestrc'};

    # Send enter key to virtual machine
    send_keys_to_vm( "<ENTER>" );

    # Sleeping 1 second
    sleep 1;

    # Send subcommand to virtual machine
    send_keys_to_vm( $step{'subcommand'} )  if  defined $step{'subcommand'};

    # Sleeping 1 second
    sleep 1;

    # Wait for successful completion
    if ( $step{'requestrc'} ) {

        # TODO: exit loop after timeout
        while (1) {
            #printf "Last step completed: %d, return code: %d.\n", $last_step_completed_nr, $last_step_completed_rc;
            last if $last_step_completed_nr == $step  and
                    $last_step_completed_rc == 0;

            # Check if last command failed
            if ( $last_step_completed_nr == $step  and  $last_step_completed_rc != 0 ) {
                consolemsg "Failed command: " . $step{'command'} . ".\n";
                consolemsg "Description of failed command: " . $step{'description'} . ".\n"  if  $step{'description'};
                die "Error: Wrong returncode";
            }

            sleep 1;
        }

    }

    # Measure step duration
    my $step_stopped_time = time();
    my $step_elapsed_sec = $step_stopped_time - $step_started_time;
    consolemsg "Step elapsed $step_elapsed_sec second(s).\n";

}


sleep 3;

consolemsg "All steps done. Program ends now.\n";

# TODO: This doesn't seem to work...
threads->exit();

exit 0;

